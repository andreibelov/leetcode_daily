/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   longestCommonPrefix.c                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: abelov <abelov@student.42london.com>       +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/24 19:17:57 by abelov            #+#    #+#             */
/*   Updated: 2024/09/24 19:17:58 by abelov           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/**
 * 3043. Find the Length of the Longest Common Prefix
 *
 * You are given two arrays with positive integers arr1 and arr2.
 *
 * You need to find the length of the longest common prefix between all pairs
 * of integers (x, y) such that x belongs to arr1 and y belongs to arr2.
 *
 * Return the length of the longest common prefix among all pairs.
 * If no common prefix exists among them, return 0.
 */
int longestCommonPrefix(const int *arr1, int arr1Size, const int *arr2, int arr2Size);

#include <math.h>

#define HASHMAP_SIZE 1000033 // Size of the hash map
#define HASH_MOD 100000007   // Large prime modulus for hashing

unsigned int hash1(int key)
{
	/* Ensure non-negative result */
	unsigned int result = (key % HASH_MOD + HASH_MOD) % HASH_MOD;
	return (unsigned int) (result % HASHMAP_SIZE);
}

/**
 * combination of bit-shifting and multiplication
 */
unsigned int hash2(int key)
{
	unsigned int hash = key;
	hash = ((hash >> 16) ^ hash) * 0x45d9f3b; // A large prime
	hash = ((hash >> 16) ^ hash) * 0x45d9f3b;
	hash = (hash >> 16) ^ hash;
	return hash % HASHMAP_SIZE;
}

#define HASH_BITS 10         // Number of middle bits to extract (adjust as needed)

/**
 * mid-square method
 */
unsigned int hash3(int key)
{
	// Step 1: Square the key
	long long square = (long long)key * key;

	// Step 2: Extract middle bits from the squared result
	// Shift right to remove the lower bits and isolate the middle portion
	unsigned int middleBits = (square >> (HASH_BITS / 2)) % HASHMAP_SIZE;

	return middleBits;
}

unsigned int hash(int key)
{
	// Use a larger prime for the modulus
	const unsigned int prime1 = 73856093;
	const unsigned int prime2 = 19349663;
	const unsigned int prime3 = 83492791;

	// Generate the hash value
	unsigned int result = (key * prime1) ^ (key * prime2) ^ (key * prime3);
	return result % HASHMAP_SIZE;
}

int longestCommonPrefix(const int *arr1, int arr1Size,
						const int *arr2, int arr2Size)
{
	int ans = 0;
	int currentPrefix;
	int commonPrefixLength;
	int prefixSet[HASHMAP_SIZE] = {0};


	int i;

	i = -1;
	while (++i < arr1Size)
	{
		currentPrefix = arr1[i];
		while (currentPrefix)
		{
			if (prefixSet[hash(currentPrefix)] != 1)
				prefixSet[hash(currentPrefix)] = 1;
			currentPrefix /= 10;
		}
	}

	i = -1;
	while (++i < arr2Size)
	{
		currentPrefix = arr2[i];
		while (currentPrefix)
		{
			if (prefixSet[hash(currentPrefix)] == 1)
			{
				commonPrefixLength = (int) (log10(currentPrefix) + 1);
				if (commonPrefixLength > ans)
					ans = commonPrefixLength;
				break; // Stop at the first match
			}
			currentPrefix /= 10;
		}
	}
	return (ans);
}
